//-----------------------------------------------------------------------------
// File : asdxDeviceContext.h
// Desc : Device Context.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <d3d11_4.h>
#include <dxgi1_6.h>
#include <asdxRef.h>

#if defined(ASDX_ENABLE_D3D11ON12)
#include <d3d12.h>
#endif


namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// DeviceContext class
///////////////////////////////////////////////////////////////////////////////
class DeviceContext
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    static const float      kDefaultBlendFactor[4];

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      シングルトンインスタンスを取得します.
    //!
    //! @return     シングルトンインスタンスを返却します.
    //-------------------------------------------------------------------------
    static DeviceContext& Instance();

    //-------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //-------------------------------------------------------------------------
    bool Init();

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      デバイスを取得します.
    //!
    //! @return     デバイスを返却します.
    //-------------------------------------------------------------------------
    ID3D11Device* GetDevice() const;

    //-------------------------------------------------------------------------
    //! @brief      イミディエイトコンテキストを取得します.
    //!
    //! @return     イミディエイトコンテキストを返却します.
    //-------------------------------------------------------------------------
    ID3D11DeviceContext4* GetContext() const;

    //-------------------------------------------------------------------------
    //! @brief      ラスタライザーステートを取得します.
    //!
    //! @return     ラスタライザーステートを返却します.
    //-------------------------------------------------------------------------
    ID3D11RasterizerState* GetDefaultRS() const;

    //-------------------------------------------------------------------------
    //! @brief      深度ステンシルステートを取得します.
    //!
    //! @return     深度ステンシルステートを返却します.
    //-------------------------------------------------------------------------
    ID3D11DepthStencilState* GetDefaultDSS() const;

    //-------------------------------------------------------------------------
    //! @brief      DXGIデバイスを取得します.
    //!
    //! @return     DXGIデバイスを返却します.
    //-------------------------------------------------------------------------
    IDXGIDevice* GetDXGIDevice() const;

    //-------------------------------------------------------------------------
    //! @brief      DXGIアダプターを取得します.
    //!
    //! @return     DXGIアダプターを返却します.
    //-------------------------------------------------------------------------
    IDXGIAdapter* GetDXGIAdapter() const;

    //-------------------------------------------------------------------------
    //! @brief      DXGIファクトリーを取得します.
    //!
    //! @return     DXGIファクトリーを返却します.
    //-------------------------------------------------------------------------
    IDXGIFactory2* GetDXGIFactory() const;

    //-------------------------------------------------------------------------
    //! @brief      ブレンドステートを取得します.
    //!
    //! @return     ブレンドステートを返却します.
    //-------------------------------------------------------------------------
    ID3D11BlendState* GetDefaultBS() const;

    //-------------------------------------------------------------------------
    //! @brief      ユーザーアノテーションを取得します.
    //!
    //! @return     ユーザーアノテーションを返却します.
    //-------------------------------------------------------------------------
    ID3DUserDefinedAnnotation* GetAnnotation() const;

    //-------------------------------------------------------------------------
    //! @brief      ドライバータイプを取得します.
    //!
    //! @return     ドライバータイプを返却します.
    //-------------------------------------------------------------------------
    D3D_DRIVER_TYPE GetDriverType() const;

    //-------------------------------------------------------------------------
    //! @brief      機能レベルを取得します.
    //!
    //! @return     機能レベルを返却します.
    //-------------------------------------------------------------------------
    D3D_FEATURE_LEVEL GetFeatureLevel() const;

    //-------------------------------------------------------------------------
    //! @brief      アロー演算子です.
    //-------------------------------------------------------------------------
    ID3D11DeviceContext* operator ->() const;

#if ASDX_ENABLE_D3D11ON12
    //-------------------------------------------------------------------------
    //! @brief      D3D12デバイスを取得します.
    //! 
    //! @return     D3D12デバイスを返却します.
    //-------------------------------------------------------------------------
    ID3D12Device* GetD3D12Device() const;

    //-------------------------------------------------------------------------
    //! @brief      D3D12グラフィックスキューを取得します.
    //! 
    //! @return     D3D12グラフィックスキューを返却します.
    //-------------------------------------------------------------------------
    ID3D12CommandQueue* GetD3D12GraphicsQueue() const;
#endif

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    static DeviceContext                s_Instance;
    RefPtr<ID3D11Device5>               m_pDevice;
    RefPtr<ID3D11DeviceContext4>        m_pContext;
    RefPtr<ID3D11RasterizerState>       m_DefaultRS;
    RefPtr<ID3D11DepthStencilState>     m_DefaultDSS;
    RefPtr<ID3D11BlendState>            m_DefaultBS;
    RefPtr<IDXGIDevice>                 m_DXGIDevice;
    RefPtr<IDXGIAdapter>                m_DXGIAdapter;
    RefPtr<IDXGIFactory2>               m_DXGIFactory;
    RefPtr<ID3DUserDefinedAnnotation>   m_Annotation;
    RefPtr<ID3D11InfoQueue>             m_pInfoQueue;
    D3D_DRIVER_TYPE                     m_DriverType    = D3D_DRIVER_TYPE_HARDWARE;
    D3D_FEATURE_LEVEL                   m_FeatureLevel  = D3D_FEATURE_LEVEL_11_0;
#if ASDX_ENABLE_D3D11ON12
    RefPtr<ID3D12Device>                m_D3D12Device;
    RefPtr<ID3D12CommandQueue>          m_D3D12GraphicsQueue;
    RefPtr<ID3D12InfoQueue>             m_D3D12InfoQueue;
#endif

    //=========================================================================
    // private methods.
    //=========================================================================
    DeviceContext();
    ~DeviceContext();
    DeviceContext               (const DeviceContext&) = delete;
    DeviceContext& operator =   (const DeviceContext&) = delete;

#if ASDX_ENABLE_D3D11ON12
    bool InitD3D12();
    void TermD3D12();
#endif
};

} // namespace asdx
