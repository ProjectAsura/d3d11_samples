//-------------------------------------------------------------------------------------------------
// File : asdxGamePad.h
// Desc : Game Pad Module.
// Copyright(c) Project Asura. All right rerseved.
//-------------------------------------------------------------------------------------------------
#pragma once

//-------------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------------
#include <cstdint>


#ifdef ASDX_AUTO_LINK
//-------------------------------------------------------------------------------------------------
// Linker
//-------------------------------------------------------------------------------------------------
#pragma comment( lib, "XInput9_1_0.lib" )

#endif//ASDX_AUTO_LINK


namespace asdx {

///////////////////////////////////////////////////////////////////////////////////////////////////
// PAD_BUTTON enum
///////////////////////////////////////////////////////////////////////////////////////////////////
enum PAD_BUTTON
{
    PAD_UP          = 0x00001L,     //!< 方向パッド上
    PAD_DOWN        = 0x00002L,     //!< 方向パッド下
    PAD_LEFT        = 0x00004L,     //!< 方向パッド左
    PAD_RIGHT       = 0x00008L,     //!< 方向パッド右
    PAD_START       = 0x00010L,     //!< スタートボタン.
    PAD_BACK        = 0x00020L,     //!< バックボタン.
    PAD_THUMB_L     = 0x00040L,     //!< 左サムスティックボタン.
    PAD_THUMB_R     = 0x00080L,     //!< 右サムスティックボタン.
    PAD_SHOULDER_L  = 0x00100L,     //!< LBボタン.
    PAD_SHOULDER_R  = 0x00200L,     //!< RBボタン.
    PAD_A           = 0x01000L,     //!< Aボタン.
    PAD_B           = 0x02000L,     //!< Bボタン.
    PAD_X           = 0x04000L,     //!< Xボタン.
    PAD_Y           = 0x08000L,     //!< Yボタン.
    PAD_TRIGGER_L   = 0x10000L,     //!< 左トリガー.
    PAD_TRIGGER_R   = 0x20000L,     //!< 右トリガー.
};

///////////////////////////////////////////////////////////////////////////////////////////////////
// GamePad class
///////////////////////////////////////////////////////////////////////////////////////////////////
class GamePad
{
    //=============================================================================================
    // list of friend classes and methods.
    //=============================================================================================
    /* NOTHING */

public:
    //=============================================================================================
    // public variables.
    //=============================================================================================
    static const uint32_t kMaxPlayerIndex = 4;

    //=============================================================================================
    // public methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    GamePad();

    //---------------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------------
    virtual ~GamePad();

    //---------------------------------------------------------------------------------------------
    //! @brief      プレイヤーインデックスを設定します.
    //!
    //! @param [in]     index       設定するプレイヤーインデックス.
    //---------------------------------------------------------------------------------------------
    void SetPlayerIndex( const uint32_t index );

    //---------------------------------------------------------------------------------------------
    //! @brief      プレイヤーインデックスを取得します.
    //!
    //! @return     設定されているプレイヤーインデックスを返却します.
    //---------------------------------------------------------------------------------------------
    uint32_t GetPlayerIndex() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      コントローラーが接続されているかチェックします.
    //!
    //! @retval true    接続されています.
    //! @retval false   接続されていません.
    //---------------------------------------------------------------------------------------------
    bool IsConnected() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      コントローラーの状態を更新します.
    //---------------------------------------------------------------------------------------------
    virtual void UpdateState();

    //---------------------------------------------------------------------------------------------
    //! @brief      バイブレーションさせます.
    //!
    //! @param[in]      leftMoter       左のモーターの振動量(有効値:0.0 ～ 1.0).
    //! @param[in]      rightMoter      右のモーターの振動量(有効値:0.0 ～ 1.0).
    //---------------------------------------------------------------------------------------------
    virtual void Vibrate( float leftMotor, float rightMotor ) const;

    //---------------------------------------------------------------------------------------------
    //! @brief      ボタンが押されたかチェックします.
    //!             フラグ切り替え向け用途として使用してください.
    //!
    //! @param[in]      type        チェックするボタン.
    //! @retval true    ボタンが押されました.
    //! @retval false   ボタンは押されません.
    //---------------------------------------------------------------------------------------------
    bool IsDown( PAD_BUTTON type ) const;

    //---------------------------------------------------------------------------------------------
    //! @brief      ボタンが押されっぱなしかどうかチェックします.
    //!
    //! @param[in]      type        チェックするボタン.
    //! @return     ボタンが押されっぱなしの状態のときはtrueを返却.
    //---------------------------------------------------------------------------------------------
    bool IsPush( PAD_BUTTON type ) const;

    //---------------------------------------------------------------------------------------------
    //! @brief      左サムスティックのX成分を取得します.
    //!
    //! @return     左サムスティックのX成分を返却します.
    //---------------------------------------------------------------------------------------------
    int16_t GetThumbLX() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      左サムスティックのY成分を取得します.
    //!
    //! @return     左サムスティックのY成分を返却します.
    //---------------------------------------------------------------------------------------------
    int16_t GetThumbLY() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      右サムスティックのX成分を取得します.
    //!
    //! @return     右サムスティックのX成分を返却します.
    //---------------------------------------------------------------------------------------------
    int16_t GetThumbRX() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      右サムスティックのY成分を取得します.
    //!
    //! @return     右サムスティックのY成分を返却します.
    //---------------------------------------------------------------------------------------------
    int16_t GetThumbRY() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      正規化された左サムスティックのX成分を取得します.
    //!
    //! @return     正規化された左サムスティックのX成分を返却します.
    //---------------------------------------------------------------------------------------------
    float  GetNormalizedThumbLX() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      正規化された左サムスティックのY成分を取得します.
    //!
    //! @return     正規化された左サムスティックのY成分を返却します.
    //---------------------------------------------------------------------------------------------
    float  GetNormalizedThumbLY() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      正規化された右サムスティックのX成分を取得します.
    //!
    //! @return     正規化された右サムスティックのX成分を返却します.
    //---------------------------------------------------------------------------------------------
    float GetNormalizedThumbRX() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      正規化された右サムスティックのY成分を取得します.
    //!
    //! @return     正規化された右サムスティックのy成分を返却します.
    //---------------------------------------------------------------------------------------------
    float GetNormalizedThumbRY() const;

protected:
    //=============================================================================================
    // protected variables.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      ボタンの値をリセットします.
    //---------------------------------------------------------------------------------------------
    void Reset();

    //=============================================================================================
    // protected methods.
    //=============================================================================================
    /* NOTHING */

private:
    //=============================================================================================
    // private variables.
    //=============================================================================================
    uint32_t    m_PlayerIndex;          //!< プレーヤーインデックスです.
    bool        m_IsConnected;          //!< 接続中かどうか.

    uint32_t    m_Buttons;              //!< ボタンの状態.
    uint8_t     m_TriggerL;             //!< 左トリガーの状態.
    uint8_t     m_TriggerR;             //!< 右トリガーの状態.

    int16_t     m_ThumbLX;              //!< 左サムスティックX成分.
    int16_t     m_ThumbLY;              //!< 左サムスティックY成分.
    int16_t     m_ThumbRX;              //!< 右サムスティックX成分.
    int16_t     m_ThumbRY;              //!< 右サムスティックY成分.

    float       m_NormThumbLX;          //!< 正規化された左サムスティックX成分.
    float       m_NormThumbLY;          //!< 正規化された左サムスティックY成分.
    float       m_NormThumbRX;          //!< 正規化された右サムスティックX成分.
    float       m_NormThumbRY;          //!< 正規化された右サムスティックY成分.

    uint32_t    m_PressedButtons;       //!< 押されているボタン.
    uint32_t    m_LastButtons;          //!< 1つ前のボタンの状態.

    //=============================================================================================
    // private methods.
    //=============================================================================================
    GamePad             (const GamePad&) = delete;
    GamePad& operator = (const GamePad&) = delete;
};

} // namespace asdx
