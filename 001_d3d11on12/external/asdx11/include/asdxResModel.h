//-----------------------------------------------------------------------------
// File : asdxResModel.h
// Desc : Model Resource.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <cstdint>
#include <vector>
#include <asdxMath.h>


#define MAX_LAYER_COUNT (4)

namespace asdx {

///////////////////////////////////////////////////////////////////////////////
// ResBoneIndex structure
///////////////////////////////////////////////////////////////////////////////
struct ResBoneIndex
{
    uint16_t     x;    //!< ボーン番号0.
    uint16_t     y;    //!< ボーン番号1.
    uint16_t     z;    //!< ボーン番号2.
    uint16_t     w;    //!< ボーン番号3.

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    ResBoneIndex() = default;

    //-------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //-------------------------------------------------------------------------
    ResBoneIndex(uint16_t i0, uint16_t i1, uint16_t i2, uint16_t i3)
   : x(i0), y(i1), z(i2), w(i3)
    { /* DO_NOTHING */ }
};

///////////////////////////////////////////////////////////////////////////////
// ResMesh structure
///////////////////////////////////////////////////////////////////////////////
struct ResMesh
{
    std::string                         MeshName;
    std::string                         MaterialName;
    std::vector<asdx::Vector3>          Positions;
    std::vector<asdx::Vector3>          Normals;
    std::vector<asdx::Vector3>          Tangents;
    std::vector<asdx::Vector3>          Bitangents;
    std::vector<asdx::Vector4>          Colors;
    std::vector<asdx::Vector2>          TexCoords[MAX_LAYER_COUNT];
    std::vector<ResBoneIndex>           BoneIndices;
    std::vector<asdx::Vector4>          BoneWeights;
    std::vector<uint32_t>               Indices;
};


///////////////////////////////////////////////////////////////////////////////
// ResModel structure
///////////////////////////////////////////////////////////////////////////////
struct ResModel
{
    std::vector<ResMesh>        Meshes;
};

//-----------------------------------------------------------------------------
//      メッシュの破棄処理を行います.
//-----------------------------------------------------------------------------
void Dispose(ResMesh& resource);

//-----------------------------------------------------------------------------
//      モデルの破棄処理を行います.
//-----------------------------------------------------------------------------
void Dispose(ResModel& resource);

//-----------------------------------------------------------------------------
//      頂点法線を計算します.
//-----------------------------------------------------------------------------
void CalcNormals(ResMesh& resource);
void CalcNormals(ResModel& resource);

//-----------------------------------------------------------------------------
//      接線ベクトルを計算します.
//-----------------------------------------------------------------------------
void CalcTangents(ResMesh& resource);
void CalcTangents(ResModel& resource);

//-----------------------------------------------------------------------------
//      八面体ラップ処理を行います.
//-----------------------------------------------------------------------------
Vector2 OctWrap(const Vector2& value);

//-----------------------------------------------------------------------------
//      法線ベクトルをパッキングします.
//-----------------------------------------------------------------------------
Vector2 PackNormal(const Vector3& value);

//-----------------------------------------------------------------------------
//      法線ベクトルをアンパッキングします.
//-----------------------------------------------------------------------------
Vector3 UnpackNormal(const Vector2& value);

//-----------------------------------------------------------------------------
//      接線空間を圧縮します.
//-----------------------------------------------------------------------------
uint32_t EncodeTBN(
    const Vector3& normal,
    const Vector3& tangent,
    uint8_t binormalHandedeness);

//-----------------------------------------------------------------------------
//      圧縮された接線空間を展開します.
//-----------------------------------------------------------------------------
void DecodeTBN(
    uint32_t encoded,
    Vector3& tangent,
    Vector3& bitangent,
    Vector3& normal);

//-----------------------------------------------------------------------------
//      カラーを圧縮します.
//-----------------------------------------------------------------------------
uint32_t EncodeColor(const asdx::Vector4& value);

//-----------------------------------------------------------------------------
//      圧縮されたカラーを展開します.
//-----------------------------------------------------------------------------
asdx::Vector4 DecodeColor(uint32_t value);

} // namespace asdx